// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"history-engine/engine/ent/page"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PageCreate is the builder for creating a Page entity.
type PageCreate struct {
	config
	mutation *PageMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (pc *PageCreate) SetUserID(i int64) *PageCreate {
	pc.mutation.SetUserID(i)
	return pc
}

// SetUniqueID sets the "unique_id" field.
func (pc *PageCreate) SetUniqueID(s string) *PageCreate {
	pc.mutation.SetUniqueID(s)
	return pc
}

// SetVersion sets the "version" field.
func (pc *PageCreate) SetVersion(i int) *PageCreate {
	pc.mutation.SetVersion(i)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *PageCreate) SetNillableVersion(i *int) *PageCreate {
	if i != nil {
		pc.SetVersion(*i)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *PageCreate) SetTitle(s string) *PageCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *PageCreate) SetNillableTitle(s *string) *PageCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetExcerpt sets the "excerpt" field.
func (pc *PageCreate) SetExcerpt(s string) *PageCreate {
	pc.mutation.SetExcerpt(s)
	return pc
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pc *PageCreate) SetNillableExcerpt(s *string) *PageCreate {
	if s != nil {
		pc.SetExcerpt(*s)
	}
	return pc
}

// SetContent sets the "content" field.
func (pc *PageCreate) SetContent(s string) *PageCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pc *PageCreate) SetNillableContent(s *string) *PageCreate {
	if s != nil {
		pc.SetContent(*s)
	}
	return pc
}

// SetURL sets the "url" field.
func (pc *PageCreate) SetURL(s string) *PageCreate {
	pc.mutation.SetURL(s)
	return pc
}

// SetPath sets the "path" field.
func (pc *PageCreate) SetPath(s string) *PageCreate {
	pc.mutation.SetPath(s)
	return pc
}

// SetSize sets the "size" field.
func (pc *PageCreate) SetSize(i int) *PageCreate {
	pc.mutation.SetSize(i)
	return pc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (pc *PageCreate) SetNillableSize(i *int) *PageCreate {
	if i != nil {
		pc.SetSize(*i)
	}
	return pc
}

// SetIndexedAt sets the "indexed_at" field.
func (pc *PageCreate) SetIndexedAt(t time.Time) *PageCreate {
	pc.mutation.SetIndexedAt(t)
	return pc
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableIndexedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetIndexedAt(*t)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PageCreate) SetCreatedAt(t time.Time) *PageCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableCreatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PageCreate) SetUpdatedAt(t time.Time) *PageCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PageCreate) SetNillableUpdatedAt(t *time.Time) *PageCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PageCreate) SetID(i int64) *PageCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PageMutation object of the builder.
func (pc *PageCreate) Mutation() *PageMutation {
	return pc.mutation
}

// Save creates the Page in the database.
func (pc *PageCreate) Save(ctx context.Context) (*Page, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PageCreate) SaveX(ctx context.Context) *Page {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PageCreate) defaults() {
	if _, ok := pc.mutation.Version(); !ok {
		v := page.DefaultVersion
		pc.mutation.SetVersion(v)
	}
	if _, ok := pc.mutation.Title(); !ok {
		v := page.DefaultTitle
		pc.mutation.SetTitle(v)
	}
	if _, ok := pc.mutation.Excerpt(); !ok {
		v := page.DefaultExcerpt
		pc.mutation.SetExcerpt(v)
	}
	if _, ok := pc.mutation.Content(); !ok {
		v := page.DefaultContent
		pc.mutation.SetContent(v)
	}
	if _, ok := pc.mutation.Size(); !ok {
		v := page.DefaultSize
		pc.mutation.SetSize(v)
	}
	if _, ok := pc.mutation.IndexedAt(); !ok {
		v := page.DefaultIndexedAt
		pc.mutation.SetIndexedAt(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := page.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := page.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PageCreate) check() error {
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Page.user_id"`)}
	}
	if _, ok := pc.mutation.UniqueID(); !ok {
		return &ValidationError{Name: "unique_id", err: errors.New(`ent: missing required field "Page.unique_id"`)}
	}
	if v, ok := pc.mutation.UniqueID(); ok {
		if err := page.UniqueIDValidator(v); err != nil {
			return &ValidationError{Name: "unique_id", err: fmt.Errorf(`ent: validator failed for field "Page.unique_id": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Page.version"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Page.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := page.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Page.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Excerpt(); !ok {
		return &ValidationError{Name: "excerpt", err: errors.New(`ent: missing required field "Page.excerpt"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Page.content"`)}
	}
	if _, ok := pc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Page.url"`)}
	}
	if v, ok := pc.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "Page.path"`)}
	}
	if v, ok := pc.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Page.size"`)}
	}
	if _, ok := pc.mutation.IndexedAt(); !ok {
		return &ValidationError{Name: "indexed_at", err: errors.New(`ent: missing required field "Page.indexed_at"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Page.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Page.updated_at"`)}
	}
	return nil
}

func (pc *PageCreate) sqlSave(ctx context.Context) (*Page, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PageCreate) createSpec() (*Page, *sqlgraph.CreateSpec) {
	var (
		_node = &Page{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(page.Table, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.SetField(page.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := pc.mutation.UniqueID(); ok {
		_spec.SetField(page.FieldUniqueID, field.TypeString, value)
		_node.UniqueID = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.SetField(page.FieldVersion, field.TypeInt, value)
		_node.Version = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Excerpt(); ok {
		_spec.SetField(page.FieldExcerpt, field.TypeString, value)
		_node.Excerpt = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(page.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pc.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := pc.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := pc.mutation.Size(); ok {
		_spec.SetField(page.FieldSize, field.TypeInt, value)
		_node.Size = value
	}
	if value, ok := pc.mutation.IndexedAt(); ok {
		_spec.SetField(page.FieldIndexedAt, field.TypeTime, value)
		_node.IndexedAt = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(page.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// PageCreateBulk is the builder for creating many Page entities in bulk.
type PageCreateBulk struct {
	config
	err      error
	builders []*PageCreate
}

// Save creates the Page entities in the database.
func (pcb *PageCreateBulk) Save(ctx context.Context) ([]*Page, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Page, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PageCreateBulk) SaveX(ctx context.Context) []*Page {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
