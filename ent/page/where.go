// Code generated by ent, DO NOT EDIT.

package page

import (
	"history-engine/engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUserID, v))
}

// UniqueID applies equality check predicate on the "unique_id" field. It's identical to UniqueIDEQ.
func UniqueID(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUniqueID, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldVersion, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldTitle, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldExcerpt, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldContent, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldURL, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPath, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSize, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldStatus, v))
}

// ParsedAt applies equality check predicate on the "parsed_at" field. It's identical to ParsedAtEQ.
func ParsedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldParsedAt, v))
}

// IndexedAt applies equality check predicate on the "indexed_at" field. It's identical to IndexedAtEQ.
func IndexedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIndexedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldUserID, v))
}

// UniqueIDEQ applies the EQ predicate on the "unique_id" field.
func UniqueIDEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUniqueID, v))
}

// UniqueIDNEQ applies the NEQ predicate on the "unique_id" field.
func UniqueIDNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldUniqueID, v))
}

// UniqueIDIn applies the In predicate on the "unique_id" field.
func UniqueIDIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldUniqueID, vs...))
}

// UniqueIDNotIn applies the NotIn predicate on the "unique_id" field.
func UniqueIDNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldUniqueID, vs...))
}

// UniqueIDGT applies the GT predicate on the "unique_id" field.
func UniqueIDGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldUniqueID, v))
}

// UniqueIDGTE applies the GTE predicate on the "unique_id" field.
func UniqueIDGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldUniqueID, v))
}

// UniqueIDLT applies the LT predicate on the "unique_id" field.
func UniqueIDLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldUniqueID, v))
}

// UniqueIDLTE applies the LTE predicate on the "unique_id" field.
func UniqueIDLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldUniqueID, v))
}

// UniqueIDContains applies the Contains predicate on the "unique_id" field.
func UniqueIDContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldUniqueID, v))
}

// UniqueIDHasPrefix applies the HasPrefix predicate on the "unique_id" field.
func UniqueIDHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldUniqueID, v))
}

// UniqueIDHasSuffix applies the HasSuffix predicate on the "unique_id" field.
func UniqueIDHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldUniqueID, v))
}

// UniqueIDEqualFold applies the EqualFold predicate on the "unique_id" field.
func UniqueIDEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldUniqueID, v))
}

// UniqueIDContainsFold applies the ContainsFold predicate on the "unique_id" field.
func UniqueIDContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldUniqueID, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldVersion, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldTitle, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldExcerpt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldContent, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldURL, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldPath, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldSize, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldStatus, v))
}

// ParsedAtEQ applies the EQ predicate on the "parsed_at" field.
func ParsedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldParsedAt, v))
}

// ParsedAtNEQ applies the NEQ predicate on the "parsed_at" field.
func ParsedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldParsedAt, v))
}

// ParsedAtIn applies the In predicate on the "parsed_at" field.
func ParsedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldParsedAt, vs...))
}

// ParsedAtNotIn applies the NotIn predicate on the "parsed_at" field.
func ParsedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldParsedAt, vs...))
}

// ParsedAtGT applies the GT predicate on the "parsed_at" field.
func ParsedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldParsedAt, v))
}

// ParsedAtGTE applies the GTE predicate on the "parsed_at" field.
func ParsedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldParsedAt, v))
}

// ParsedAtLT applies the LT predicate on the "parsed_at" field.
func ParsedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldParsedAt, v))
}

// ParsedAtLTE applies the LTE predicate on the "parsed_at" field.
func ParsedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldParsedAt, v))
}

// IndexedAtEQ applies the EQ predicate on the "indexed_at" field.
func IndexedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIndexedAt, v))
}

// IndexedAtNEQ applies the NEQ predicate on the "indexed_at" field.
func IndexedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldIndexedAt, v))
}

// IndexedAtIn applies the In predicate on the "indexed_at" field.
func IndexedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldIndexedAt, vs...))
}

// IndexedAtNotIn applies the NotIn predicate on the "indexed_at" field.
func IndexedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldIndexedAt, vs...))
}

// IndexedAtGT applies the GT predicate on the "indexed_at" field.
func IndexedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldIndexedAt, v))
}

// IndexedAtGTE applies the GTE predicate on the "indexed_at" field.
func IndexedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldIndexedAt, v))
}

// IndexedAtLT applies the LT predicate on the "indexed_at" field.
func IndexedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldIndexedAt, v))
}

// IndexedAtLTE applies the LTE predicate on the "indexed_at" field.
func IndexedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldIndexedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(sql.NotPredicates(p))
}
