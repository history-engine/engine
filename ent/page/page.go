// Code generated by ent, DO NOT EDIT.

package page

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUniqueID holds the string denoting the unique_id field in the database.
	FieldUniqueID = "unique_id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldExcerpt holds the string denoting the excerpt field in the database.
	FieldExcerpt = "excerpt"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldIndexedAt holds the string denoting the indexed_at field in the database.
	FieldIndexedAt = "indexed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the page in the database.
	Table = "page"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUniqueID,
	FieldVersion,
	FieldTitle,
	FieldExcerpt,
	FieldContent,
	FieldURL,
	FieldPath,
	FieldSize,
	FieldIndexedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UniqueIDValidator is a validator for the "unique_id" field. It is called by the builders before save.
	UniqueIDValidator func(string) error
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultExcerpt holds the default value on creation for the "excerpt" field.
	DefaultExcerpt string
	// ExcerptValidator is a validator for the "excerpt" field. It is called by the builders before save.
	ExcerptValidator func(string) error
	// DefaultContent holds the default value on creation for the "content" field.
	DefaultContent string
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultSize holds the default value on creation for the "size" field.
	DefaultSize int
	// DefaultIndexedAt holds the default value on creation for the "indexed_at" field.
	DefaultIndexedAt time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUniqueID orders the results by the unique_id field.
func ByUniqueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqueID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByExcerpt orders the results by the excerpt field.
func ByExcerpt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExcerpt, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByIndexedAt orders the results by the indexed_at field.
func ByIndexedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndexedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
