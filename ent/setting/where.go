// Code generated by ent, DO NOT EDIT.

package setting

import (
	"history-engine/engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUserID, v))
}

// MaxVersion applies equality check predicate on the "max_version" field. It's identical to MaxVersionEQ.
func MaxVersion(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMaxVersion, v))
}

// MinVersionInterval applies equality check predicate on the "min_version_interval" field. It's identical to MinVersionIntervalEQ.
func MinVersionInterval(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMinVersionInterval, v))
}

// MinSize applies equality check predicate on the "min_size" field. It's identical to MinSizeEQ.
func MinSize(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMinSize, v))
}

// MaxSize applies equality check predicate on the "max_size" field. It's identical to MaxSizeEQ.
func MaxSize(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMaxSize, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldUserID, v))
}

// MaxVersionEQ applies the EQ predicate on the "max_version" field.
func MaxVersionEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMaxVersion, v))
}

// MaxVersionNEQ applies the NEQ predicate on the "max_version" field.
func MaxVersionNEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldMaxVersion, v))
}

// MaxVersionIn applies the In predicate on the "max_version" field.
func MaxVersionIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldMaxVersion, vs...))
}

// MaxVersionNotIn applies the NotIn predicate on the "max_version" field.
func MaxVersionNotIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldMaxVersion, vs...))
}

// MaxVersionGT applies the GT predicate on the "max_version" field.
func MaxVersionGT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldMaxVersion, v))
}

// MaxVersionGTE applies the GTE predicate on the "max_version" field.
func MaxVersionGTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldMaxVersion, v))
}

// MaxVersionLT applies the LT predicate on the "max_version" field.
func MaxVersionLT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldMaxVersion, v))
}

// MaxVersionLTE applies the LTE predicate on the "max_version" field.
func MaxVersionLTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldMaxVersion, v))
}

// MinVersionIntervalEQ applies the EQ predicate on the "min_version_interval" field.
func MinVersionIntervalEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMinVersionInterval, v))
}

// MinVersionIntervalNEQ applies the NEQ predicate on the "min_version_interval" field.
func MinVersionIntervalNEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldMinVersionInterval, v))
}

// MinVersionIntervalIn applies the In predicate on the "min_version_interval" field.
func MinVersionIntervalIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldMinVersionInterval, vs...))
}

// MinVersionIntervalNotIn applies the NotIn predicate on the "min_version_interval" field.
func MinVersionIntervalNotIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldMinVersionInterval, vs...))
}

// MinVersionIntervalGT applies the GT predicate on the "min_version_interval" field.
func MinVersionIntervalGT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldMinVersionInterval, v))
}

// MinVersionIntervalGTE applies the GTE predicate on the "min_version_interval" field.
func MinVersionIntervalGTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldMinVersionInterval, v))
}

// MinVersionIntervalLT applies the LT predicate on the "min_version_interval" field.
func MinVersionIntervalLT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldMinVersionInterval, v))
}

// MinVersionIntervalLTE applies the LTE predicate on the "min_version_interval" field.
func MinVersionIntervalLTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldMinVersionInterval, v))
}

// MinSizeEQ applies the EQ predicate on the "min_size" field.
func MinSizeEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMinSize, v))
}

// MinSizeNEQ applies the NEQ predicate on the "min_size" field.
func MinSizeNEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldMinSize, v))
}

// MinSizeIn applies the In predicate on the "min_size" field.
func MinSizeIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldMinSize, vs...))
}

// MinSizeNotIn applies the NotIn predicate on the "min_size" field.
func MinSizeNotIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldMinSize, vs...))
}

// MinSizeGT applies the GT predicate on the "min_size" field.
func MinSizeGT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldMinSize, v))
}

// MinSizeGTE applies the GTE predicate on the "min_size" field.
func MinSizeGTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldMinSize, v))
}

// MinSizeLT applies the LT predicate on the "min_size" field.
func MinSizeLT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldMinSize, v))
}

// MinSizeLTE applies the LTE predicate on the "min_size" field.
func MinSizeLTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldMinSize, v))
}

// MaxSizeEQ applies the EQ predicate on the "max_size" field.
func MaxSizeEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldMaxSize, v))
}

// MaxSizeNEQ applies the NEQ predicate on the "max_size" field.
func MaxSizeNEQ(v int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldMaxSize, v))
}

// MaxSizeIn applies the In predicate on the "max_size" field.
func MaxSizeIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldMaxSize, vs...))
}

// MaxSizeNotIn applies the NotIn predicate on the "max_size" field.
func MaxSizeNotIn(vs ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldMaxSize, vs...))
}

// MaxSizeGT applies the GT predicate on the "max_size" field.
func MaxSizeGT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldMaxSize, v))
}

// MaxSizeGTE applies the GTE predicate on the "max_size" field.
func MaxSizeGTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldMaxSize, v))
}

// MaxSizeLT applies the LT predicate on the "max_size" field.
func MaxSizeLT(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldMaxSize, v))
}

// MaxSizeLTE applies the LTE predicate on the "max_size" field.
func MaxSizeLTE(v int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldMaxSize, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.NotPredicates(p))
}
