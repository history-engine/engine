// Code generated by ent, DO NOT EDIT.

package setting

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the setting type in the database.
	Label = "setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMaxVersion holds the string denoting the max_version field in the database.
	FieldMaxVersion = "max_version"
	// FieldMinVersionInterval holds the string denoting the min_version_interval field in the database.
	FieldMinVersionInterval = "min_version_interval"
	// FieldMinSize holds the string denoting the min_size field in the database.
	FieldMinSize = "min_size"
	// FieldMaxSize holds the string denoting the max_size field in the database.
	FieldMaxSize = "max_size"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the setting in the database.
	Table = "setting"
)

// Columns holds all SQL columns for setting fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldMaxVersion,
	FieldMinVersionInterval,
	FieldMinSize,
	FieldMaxSize,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Setting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMaxVersion orders the results by the max_version field.
func ByMaxVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxVersion, opts...).ToFunc()
}

// ByMinVersionInterval orders the results by the min_version_interval field.
func ByMinVersionInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinVersionInterval, opts...).ToFunc()
}

// ByMinSize orders the results by the min_size field.
func ByMinSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinSize, opts...).ToFunc()
}

// ByMaxSize orders the results by the max_size field.
func ByMaxSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxSize, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
