// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"history-engine/engine/ent/page"
	"history-engine/engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PageUpdate is the builder for updating Page entities.
type PageUpdate struct {
	config
	hooks    []Hook
	mutation *PageMutation
}

// Where appends a list predicates to the PageUpdate builder.
func (pu *PageUpdate) Where(ps ...predicate.Page) *PageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *PageUpdate) SetUserID(i int64) *PageUpdate {
	pu.mutation.ResetUserID()
	pu.mutation.SetUserID(i)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *PageUpdate) SetNillableUserID(i *int64) *PageUpdate {
	if i != nil {
		pu.SetUserID(*i)
	}
	return pu
}

// AddUserID adds i to the "user_id" field.
func (pu *PageUpdate) AddUserID(i int64) *PageUpdate {
	pu.mutation.AddUserID(i)
	return pu
}

// SetVersion sets the "version" field.
func (pu *PageUpdate) SetVersion(i int) *PageUpdate {
	pu.mutation.ResetVersion()
	pu.mutation.SetVersion(i)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *PageUpdate) SetNillableVersion(i *int) *PageUpdate {
	if i != nil {
		pu.SetVersion(*i)
	}
	return pu
}

// AddVersion adds i to the "version" field.
func (pu *PageUpdate) AddVersion(i int) *PageUpdate {
	pu.mutation.AddVersion(i)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PageUpdate) SetTitle(s string) *PageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PageUpdate) SetNillableTitle(s *string) *PageUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetExcerpt sets the "excerpt" field.
func (pu *PageUpdate) SetExcerpt(s string) *PageUpdate {
	pu.mutation.SetExcerpt(s)
	return pu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pu *PageUpdate) SetNillableExcerpt(s *string) *PageUpdate {
	if s != nil {
		pu.SetExcerpt(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PageUpdate) SetContent(s string) *PageUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PageUpdate) SetNillableContent(s *string) *PageUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetURL sets the "url" field.
func (pu *PageUpdate) SetURL(s string) *PageUpdate {
	pu.mutation.SetURL(s)
	return pu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (pu *PageUpdate) SetNillableURL(s *string) *PageUpdate {
	if s != nil {
		pu.SetURL(*s)
	}
	return pu
}

// SetPath sets the "path" field.
func (pu *PageUpdate) SetPath(s string) *PageUpdate {
	pu.mutation.SetPath(s)
	return pu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (pu *PageUpdate) SetNillablePath(s *string) *PageUpdate {
	if s != nil {
		pu.SetPath(*s)
	}
	return pu
}

// SetSize sets the "size" field.
func (pu *PageUpdate) SetSize(i int) *PageUpdate {
	pu.mutation.ResetSize()
	pu.mutation.SetSize(i)
	return pu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (pu *PageUpdate) SetNillableSize(i *int) *PageUpdate {
	if i != nil {
		pu.SetSize(*i)
	}
	return pu
}

// AddSize adds i to the "size" field.
func (pu *PageUpdate) AddSize(i int) *PageUpdate {
	pu.mutation.AddSize(i)
	return pu
}

// SetDomains sets the "domains" field.
func (pu *PageUpdate) SetDomains(s []string) *PageUpdate {
	pu.mutation.SetDomains(s)
	return pu
}

// AppendDomains appends s to the "domains" field.
func (pu *PageUpdate) AppendDomains(s []string) *PageUpdate {
	pu.mutation.AppendDomains(s)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PageUpdate) SetStatus(i int) *PageUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PageUpdate) SetNillableStatus(i *int) *PageUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PageUpdate) AddStatus(i int) *PageUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetParsedAt sets the "parsed_at" field.
func (pu *PageUpdate) SetParsedAt(t time.Time) *PageUpdate {
	pu.mutation.SetParsedAt(t)
	return pu
}

// SetNillableParsedAt sets the "parsed_at" field if the given value is not nil.
func (pu *PageUpdate) SetNillableParsedAt(t *time.Time) *PageUpdate {
	if t != nil {
		pu.SetParsedAt(*t)
	}
	return pu
}

// SetIndexedAt sets the "indexed_at" field.
func (pu *PageUpdate) SetIndexedAt(t time.Time) *PageUpdate {
	pu.mutation.SetIndexedAt(t)
	return pu
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (pu *PageUpdate) SetNillableIndexedAt(t *time.Time) *PageUpdate {
	if t != nil {
		pu.SetIndexedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PageUpdate) SetUpdatedAt(t time.Time) *PageUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// Mutation returns the PageMutation object of the builder.
func (pu *PageUpdate) Mutation() *PageMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PageUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PageUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PageUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := page.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Page.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	return nil
}

func (pu *PageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UserID(); ok {
		_spec.SetField(page.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUserID(); ok {
		_spec.AddField(page.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.SetField(page.FieldVersion, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedVersion(); ok {
		_spec.AddField(page.FieldVersion, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Excerpt(); ok {
		_spec.SetField(page.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(page.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
	}
	if value, ok := pu.mutation.Size(); ok {
		_spec.SetField(page.FieldSize, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedSize(); ok {
		_spec.AddField(page.FieldSize, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Domains(); ok {
		_spec.SetField(page.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, page.FieldDomains, value)
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(page.FieldStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ParsedAt(); ok {
		_spec.SetField(page.FieldParsedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.IndexedAt(); ok {
		_spec.SetField(page.FieldIndexedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PageUpdateOne is the builder for updating a single Page entity.
type PageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageMutation
}

// SetUserID sets the "user_id" field.
func (puo *PageUpdateOne) SetUserID(i int64) *PageUpdateOne {
	puo.mutation.ResetUserID()
	puo.mutation.SetUserID(i)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableUserID(i *int64) *PageUpdateOne {
	if i != nil {
		puo.SetUserID(*i)
	}
	return puo
}

// AddUserID adds i to the "user_id" field.
func (puo *PageUpdateOne) AddUserID(i int64) *PageUpdateOne {
	puo.mutation.AddUserID(i)
	return puo
}

// SetVersion sets the "version" field.
func (puo *PageUpdateOne) SetVersion(i int) *PageUpdateOne {
	puo.mutation.ResetVersion()
	puo.mutation.SetVersion(i)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableVersion(i *int) *PageUpdateOne {
	if i != nil {
		puo.SetVersion(*i)
	}
	return puo
}

// AddVersion adds i to the "version" field.
func (puo *PageUpdateOne) AddVersion(i int) *PageUpdateOne {
	puo.mutation.AddVersion(i)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PageUpdateOne) SetTitle(s string) *PageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableTitle(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetExcerpt sets the "excerpt" field.
func (puo *PageUpdateOne) SetExcerpt(s string) *PageUpdateOne {
	puo.mutation.SetExcerpt(s)
	return puo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableExcerpt(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetExcerpt(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PageUpdateOne) SetContent(s string) *PageUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableContent(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetURL sets the "url" field.
func (puo *PageUpdateOne) SetURL(s string) *PageUpdateOne {
	puo.mutation.SetURL(s)
	return puo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableURL(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetURL(*s)
	}
	return puo
}

// SetPath sets the "path" field.
func (puo *PageUpdateOne) SetPath(s string) *PageUpdateOne {
	puo.mutation.SetPath(s)
	return puo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillablePath(s *string) *PageUpdateOne {
	if s != nil {
		puo.SetPath(*s)
	}
	return puo
}

// SetSize sets the "size" field.
func (puo *PageUpdateOne) SetSize(i int) *PageUpdateOne {
	puo.mutation.ResetSize()
	puo.mutation.SetSize(i)
	return puo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableSize(i *int) *PageUpdateOne {
	if i != nil {
		puo.SetSize(*i)
	}
	return puo
}

// AddSize adds i to the "size" field.
func (puo *PageUpdateOne) AddSize(i int) *PageUpdateOne {
	puo.mutation.AddSize(i)
	return puo
}

// SetDomains sets the "domains" field.
func (puo *PageUpdateOne) SetDomains(s []string) *PageUpdateOne {
	puo.mutation.SetDomains(s)
	return puo
}

// AppendDomains appends s to the "domains" field.
func (puo *PageUpdateOne) AppendDomains(s []string) *PageUpdateOne {
	puo.mutation.AppendDomains(s)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PageUpdateOne) SetStatus(i int) *PageUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableStatus(i *int) *PageUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PageUpdateOne) AddStatus(i int) *PageUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetParsedAt sets the "parsed_at" field.
func (puo *PageUpdateOne) SetParsedAt(t time.Time) *PageUpdateOne {
	puo.mutation.SetParsedAt(t)
	return puo
}

// SetNillableParsedAt sets the "parsed_at" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableParsedAt(t *time.Time) *PageUpdateOne {
	if t != nil {
		puo.SetParsedAt(*t)
	}
	return puo
}

// SetIndexedAt sets the "indexed_at" field.
func (puo *PageUpdateOne) SetIndexedAt(t time.Time) *PageUpdateOne {
	puo.mutation.SetIndexedAt(t)
	return puo
}

// SetNillableIndexedAt sets the "indexed_at" field if the given value is not nil.
func (puo *PageUpdateOne) SetNillableIndexedAt(t *time.Time) *PageUpdateOne {
	if t != nil {
		puo.SetIndexedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PageUpdateOne) SetUpdatedAt(t time.Time) *PageUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// Mutation returns the PageMutation object of the builder.
func (puo *PageUpdateOne) Mutation() *PageMutation {
	return puo.mutation
}

// Where appends a list predicates to the PageUpdate builder.
func (puo *PageUpdateOne) Where(ps ...predicate.Page) *PageUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PageUpdateOne) Select(field string, fields ...string) *PageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Page entity.
func (puo *PageUpdateOne) Save(ctx context.Context) (*Page, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PageUpdateOne) SaveX(ctx context.Context) *Page {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PageUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := page.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PageUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := page.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Page.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.URL(); ok {
		if err := page.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Page.url": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Path(); ok {
		if err := page.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Page.path": %w`, err)}
		}
	}
	return nil
}

func (puo *PageUpdateOne) sqlSave(ctx context.Context) (_node *Page, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(page.Table, page.Columns, sqlgraph.NewFieldSpec(page.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Page.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, page.FieldID)
		for _, f := range fields {
			if !page.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != page.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UserID(); ok {
		_spec.SetField(page.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUserID(); ok {
		_spec.AddField(page.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.SetField(page.FieldVersion, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedVersion(); ok {
		_spec.AddField(page.FieldVersion, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(page.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Excerpt(); ok {
		_spec.SetField(page.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(page.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.URL(); ok {
		_spec.SetField(page.FieldURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.Path(); ok {
		_spec.SetField(page.FieldPath, field.TypeString, value)
	}
	if value, ok := puo.mutation.Size(); ok {
		_spec.SetField(page.FieldSize, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedSize(); ok {
		_spec.AddField(page.FieldSize, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Domains(); ok {
		_spec.SetField(page.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, page.FieldDomains, value)
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(page.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(page.FieldStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ParsedAt(); ok {
		_spec.SetField(page.FieldParsedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.IndexedAt(); ok {
		_spec.SetField(page.FieldIndexedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(page.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Page{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{page.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
