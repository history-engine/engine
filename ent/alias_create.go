// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"history-engine/engine/ent/alias"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AliasCreate is the builder for creating a Alias entity.
type AliasCreate struct {
	config
	mutation *AliasMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AliasCreate) SetUserID(i int64) *AliasCreate {
	ac.mutation.SetUserID(i)
	return ac
}

// SetDomain sets the "domain" field.
func (ac *AliasCreate) SetDomain(s string) *AliasCreate {
	ac.mutation.SetDomain(s)
	return ac
}

// SetAlias sets the "alias" field.
func (ac *AliasCreate) SetAlias(s string) *AliasCreate {
	ac.mutation.SetAlias(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AliasCreate) SetCreatedAt(t time.Time) *AliasCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AliasCreate) SetNillableCreatedAt(t *time.Time) *AliasCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AliasCreate) SetUpdatedAt(t time.Time) *AliasCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AliasCreate) SetNillableUpdatedAt(t *time.Time) *AliasCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AliasCreate) SetID(i int64) *AliasCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AliasMutation object of the builder.
func (ac *AliasCreate) Mutation() *AliasMutation {
	return ac.mutation
}

// Save creates the Alias in the database.
func (ac *AliasCreate) Save(ctx context.Context) (*Alias, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AliasCreate) SaveX(ctx context.Context) *Alias {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AliasCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AliasCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AliasCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := alias.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := alias.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AliasCreate) check() error {
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Alias.user_id"`)}
	}
	if _, ok := ac.mutation.Domain(); !ok {
		return &ValidationError{Name: "domain", err: errors.New(`ent: missing required field "Alias.domain"`)}
	}
	if v, ok := ac.mutation.Domain(); ok {
		if err := alias.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Alias.domain": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Alias(); !ok {
		return &ValidationError{Name: "alias", err: errors.New(`ent: missing required field "Alias.alias"`)}
	}
	if v, ok := ac.mutation.Alias(); ok {
		if err := alias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Alias.alias": %w`, err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Alias.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Alias.updated_at"`)}
	}
	return nil
}

func (ac *AliasCreate) sqlSave(ctx context.Context) (*Alias, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AliasCreate) createSpec() (*Alias, *sqlgraph.CreateSpec) {
	var (
		_node = &Alias{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(alias.Table, sqlgraph.NewFieldSpec(alias.FieldID, field.TypeInt64))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UserID(); ok {
		_spec.SetField(alias.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ac.mutation.Domain(); ok {
		_spec.SetField(alias.FieldDomain, field.TypeString, value)
		_node.Domain = value
	}
	if value, ok := ac.mutation.Alias(); ok {
		_spec.SetField(alias.FieldAlias, field.TypeString, value)
		_node.Alias = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(alias.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(alias.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AliasCreateBulk is the builder for creating many Alias entities in bulk.
type AliasCreateBulk struct {
	config
	err      error
	builders []*AliasCreate
}

// Save creates the Alias entities in the database.
func (acb *AliasCreateBulk) Save(ctx context.Context) ([]*Alias, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Alias, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AliasMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AliasCreateBulk) SaveX(ctx context.Context) []*Alias {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AliasCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AliasCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
