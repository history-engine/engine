// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"history-engine/engine/ent/alias"
	"history-engine/engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AliasUpdate is the builder for updating Alias entities.
type AliasUpdate struct {
	config
	hooks    []Hook
	mutation *AliasMutation
}

// Where appends a list predicates to the AliasUpdate builder.
func (au *AliasUpdate) Where(ps ...predicate.Alias) *AliasUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AliasUpdate) SetUserID(i int64) *AliasUpdate {
	au.mutation.ResetUserID()
	au.mutation.SetUserID(i)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AliasUpdate) SetNillableUserID(i *int64) *AliasUpdate {
	if i != nil {
		au.SetUserID(*i)
	}
	return au
}

// AddUserID adds i to the "user_id" field.
func (au *AliasUpdate) AddUserID(i int64) *AliasUpdate {
	au.mutation.AddUserID(i)
	return au
}

// SetDomain sets the "domain" field.
func (au *AliasUpdate) SetDomain(s string) *AliasUpdate {
	au.mutation.SetDomain(s)
	return au
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (au *AliasUpdate) SetNillableDomain(s *string) *AliasUpdate {
	if s != nil {
		au.SetDomain(*s)
	}
	return au
}

// SetAlias sets the "alias" field.
func (au *AliasUpdate) SetAlias(s string) *AliasUpdate {
	au.mutation.SetAlias(s)
	return au
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (au *AliasUpdate) SetNillableAlias(s *string) *AliasUpdate {
	if s != nil {
		au.SetAlias(*s)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AliasUpdate) SetUpdatedAt(t time.Time) *AliasUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// Mutation returns the AliasMutation object of the builder.
func (au *AliasUpdate) Mutation() *AliasMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AliasUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AliasUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AliasUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AliasUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AliasUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := alias.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AliasUpdate) check() error {
	if v, ok := au.mutation.Domain(); ok {
		if err := alias.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Alias.domain": %w`, err)}
		}
	}
	if v, ok := au.mutation.Alias(); ok {
		if err := alias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Alias.alias": %w`, err)}
		}
	}
	return nil
}

func (au *AliasUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alias.Table, alias.Columns, sqlgraph.NewFieldSpec(alias.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UserID(); ok {
		_spec.SetField(alias.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedUserID(); ok {
		_spec.AddField(alias.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.Domain(); ok {
		_spec.SetField(alias.FieldDomain, field.TypeString, value)
	}
	if value, ok := au.mutation.Alias(); ok {
		_spec.SetField(alias.FieldAlias, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(alias.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AliasUpdateOne is the builder for updating a single Alias entity.
type AliasUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AliasMutation
}

// SetUserID sets the "user_id" field.
func (auo *AliasUpdateOne) SetUserID(i int64) *AliasUpdateOne {
	auo.mutation.ResetUserID()
	auo.mutation.SetUserID(i)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AliasUpdateOne) SetNillableUserID(i *int64) *AliasUpdateOne {
	if i != nil {
		auo.SetUserID(*i)
	}
	return auo
}

// AddUserID adds i to the "user_id" field.
func (auo *AliasUpdateOne) AddUserID(i int64) *AliasUpdateOne {
	auo.mutation.AddUserID(i)
	return auo
}

// SetDomain sets the "domain" field.
func (auo *AliasUpdateOne) SetDomain(s string) *AliasUpdateOne {
	auo.mutation.SetDomain(s)
	return auo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (auo *AliasUpdateOne) SetNillableDomain(s *string) *AliasUpdateOne {
	if s != nil {
		auo.SetDomain(*s)
	}
	return auo
}

// SetAlias sets the "alias" field.
func (auo *AliasUpdateOne) SetAlias(s string) *AliasUpdateOne {
	auo.mutation.SetAlias(s)
	return auo
}

// SetNillableAlias sets the "alias" field if the given value is not nil.
func (auo *AliasUpdateOne) SetNillableAlias(s *string) *AliasUpdateOne {
	if s != nil {
		auo.SetAlias(*s)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AliasUpdateOne) SetUpdatedAt(t time.Time) *AliasUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// Mutation returns the AliasMutation object of the builder.
func (auo *AliasUpdateOne) Mutation() *AliasMutation {
	return auo.mutation
}

// Where appends a list predicates to the AliasUpdate builder.
func (auo *AliasUpdateOne) Where(ps ...predicate.Alias) *AliasUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AliasUpdateOne) Select(field string, fields ...string) *AliasUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Alias entity.
func (auo *AliasUpdateOne) Save(ctx context.Context) (*Alias, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AliasUpdateOne) SaveX(ctx context.Context) *Alias {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AliasUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AliasUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AliasUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := alias.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AliasUpdateOne) check() error {
	if v, ok := auo.mutation.Domain(); ok {
		if err := alias.DomainValidator(v); err != nil {
			return &ValidationError{Name: "domain", err: fmt.Errorf(`ent: validator failed for field "Alias.domain": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Alias(); ok {
		if err := alias.AliasValidator(v); err != nil {
			return &ValidationError{Name: "alias", err: fmt.Errorf(`ent: validator failed for field "Alias.alias": %w`, err)}
		}
	}
	return nil
}

func (auo *AliasUpdateOne) sqlSave(ctx context.Context) (_node *Alias, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alias.Table, alias.Columns, sqlgraph.NewFieldSpec(alias.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Alias.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alias.FieldID)
		for _, f := range fields {
			if !alias.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alias.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UserID(); ok {
		_spec.SetField(alias.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedUserID(); ok {
		_spec.AddField(alias.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.Domain(); ok {
		_spec.SetField(alias.FieldDomain, field.TypeString, value)
	}
	if value, ok := auo.mutation.Alias(); ok {
		_spec.SetField(alias.FieldAlias, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(alias.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Alias{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alias.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
