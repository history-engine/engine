// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"history-engine/engine/ent/icon"
	"history-engine/engine/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IconUpdate is the builder for updating Icon entities.
type IconUpdate struct {
	config
	hooks    []Hook
	mutation *IconMutation
}

// Where appends a list predicates to the IconUpdate builder.
func (iu *IconUpdate) Where(ps ...predicate.Icon) *IconUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetHost sets the "host" field.
func (iu *IconUpdate) SetHost(s string) *IconUpdate {
	iu.mutation.SetHost(s)
	return iu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (iu *IconUpdate) SetNillableHost(s *string) *IconUpdate {
	if s != nil {
		iu.SetHost(*s)
	}
	return iu
}

// SetPath sets the "path" field.
func (iu *IconUpdate) SetPath(s string) *IconUpdate {
	iu.mutation.SetPath(s)
	return iu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (iu *IconUpdate) SetNillablePath(s *string) *IconUpdate {
	if s != nil {
		iu.SetPath(*s)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *IconUpdate) SetUpdatedAt(t time.Time) *IconUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// Mutation returns the IconMutation object of the builder.
func (iu *IconUpdate) Mutation() *IconMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IconUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IconUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IconUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IconUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *IconUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := icon.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IconUpdate) check() error {
	if v, ok := iu.mutation.Host(); ok {
		if err := icon.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Icon.host": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Path(); ok {
		if err := icon.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Icon.path": %w`, err)}
		}
	}
	return nil
}

func (iu *IconUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(icon.Table, icon.Columns, sqlgraph.NewFieldSpec(icon.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Host(); ok {
		_spec.SetField(icon.FieldHost, field.TypeString, value)
	}
	if value, ok := iu.mutation.Path(); ok {
		_spec.SetField(icon.FieldPath, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(icon.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IconUpdateOne is the builder for updating a single Icon entity.
type IconUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IconMutation
}

// SetHost sets the "host" field.
func (iuo *IconUpdateOne) SetHost(s string) *IconUpdateOne {
	iuo.mutation.SetHost(s)
	return iuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (iuo *IconUpdateOne) SetNillableHost(s *string) *IconUpdateOne {
	if s != nil {
		iuo.SetHost(*s)
	}
	return iuo
}

// SetPath sets the "path" field.
func (iuo *IconUpdateOne) SetPath(s string) *IconUpdateOne {
	iuo.mutation.SetPath(s)
	return iuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (iuo *IconUpdateOne) SetNillablePath(s *string) *IconUpdateOne {
	if s != nil {
		iuo.SetPath(*s)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *IconUpdateOne) SetUpdatedAt(t time.Time) *IconUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// Mutation returns the IconMutation object of the builder.
func (iuo *IconUpdateOne) Mutation() *IconMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IconUpdate builder.
func (iuo *IconUpdateOne) Where(ps ...predicate.Icon) *IconUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IconUpdateOne) Select(field string, fields ...string) *IconUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Icon entity.
func (iuo *IconUpdateOne) Save(ctx context.Context) (*Icon, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IconUpdateOne) SaveX(ctx context.Context) *Icon {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IconUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IconUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *IconUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := icon.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IconUpdateOne) check() error {
	if v, ok := iuo.mutation.Host(); ok {
		if err := icon.HostValidator(v); err != nil {
			return &ValidationError{Name: "host", err: fmt.Errorf(`ent: validator failed for field "Icon.host": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Path(); ok {
		if err := icon.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "Icon.path": %w`, err)}
		}
	}
	return nil
}

func (iuo *IconUpdateOne) sqlSave(ctx context.Context) (_node *Icon, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(icon.Table, icon.Columns, sqlgraph.NewFieldSpec(icon.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Icon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, icon.FieldID)
		for _, f := range fields {
			if !icon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != icon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Host(); ok {
		_spec.SetField(icon.FieldHost, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Path(); ok {
		_spec.SetField(icon.FieldPath, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(icon.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Icon{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{icon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
