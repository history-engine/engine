// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"history-engine/engine/ent/page"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Page is the model entity for the Page schema.
type Page struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 用户id
	UserID int64 `json:"user_id,omitempty"`
	// 页面唯一id
	UniqueID string `json:"unique_id,omitempty"`
	// 版本
	Version int `json:"version,omitempty"`
	// 页面标题
	Title string `json:"title,omitempty"`
	// 摘要
	Excerpt string `json:"excerpt,omitempty"`
	// 提取后的内容
	Content string `json:"content,omitempty"`
	// 原始地址
	URL string `json:"url,omitempty"`
	// 完整本地文件地址
	Path string `json:"path,omitempty"`
	// 文件大小
	Size int `json:"size,omitempty"`
	// 最后索引时间
	IndexedAt time.Time `json:"indexed_at,omitempty"`
	// 入库时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 最后更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Page) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case page.FieldID, page.FieldUserID, page.FieldVersion, page.FieldSize:
			values[i] = new(sql.NullInt64)
		case page.FieldUniqueID, page.FieldTitle, page.FieldExcerpt, page.FieldContent, page.FieldURL, page.FieldPath:
			values[i] = new(sql.NullString)
		case page.FieldIndexedAt, page.FieldCreatedAt, page.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Page fields.
func (pa *Page) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case page.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int64(value.Int64)
		case page.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pa.UserID = value.Int64
			}
		case page.FieldUniqueID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unique_id", values[i])
			} else if value.Valid {
				pa.UniqueID = value.String
			}
		case page.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pa.Version = int(value.Int64)
			}
		case page.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pa.Title = value.String
			}
		case page.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				pa.Excerpt = value.String
			}
		case page.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pa.Content = value.String
			}
		case page.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pa.URL = value.String
			}
		case page.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				pa.Path = value.String
			}
		case page.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				pa.Size = int(value.Int64)
			}
		case page.FieldIndexedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field indexed_at", values[i])
			} else if value.Valid {
				pa.IndexedAt = value.Time
			}
		case page.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case page.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Page.
// This includes values selected through modifiers, order, etc.
func (pa *Page) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// Update returns a builder for updating this Page.
// Note that you need to call Page.Unwrap() before calling this method if this Page
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Page) Update() *PageUpdateOne {
	return NewPageClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Page entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Page) Unwrap() *Page {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Page is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Page) String() string {
	var builder strings.Builder
	builder.WriteString("Page(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.UserID))
	builder.WriteString(", ")
	builder.WriteString("unique_id=")
	builder.WriteString(pa.UniqueID)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", pa.Version))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pa.Title)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(pa.Excerpt)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pa.Content)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(pa.URL)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(pa.Path)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", pa.Size))
	builder.WriteString(", ")
	builder.WriteString("indexed_at=")
	builder.WriteString(pa.IndexedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Pages is a parsable slice of Page.
type Pages []*Page
